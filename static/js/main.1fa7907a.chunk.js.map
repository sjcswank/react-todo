{"version":3,"sources":["todos.js","todoForm.js","App.js","serviceWorker.js","index.js"],"names":["Todo","_ref","todos","toggleComplete","deleteTodo","todoList","length","map","todo","complete","react_default","a","createElement","key","id","onClick","className","content","TodoForm","state","handleChange","event","_this","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","onChange","type","Component","App","Math","random","concat","Object","toConsumableArray","filteredTodos","filter","console","log","todoForm_TodoForm","src_todos","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAqCeA,QAlCF,SAAAC,GAAyC,IAAvCC,EAAuCD,EAAvCC,MAAOC,EAAgCF,EAAhCE,eAAgBC,EAAgBH,EAAhBG,WAE/BC,EAAWH,EAAMI,OACtBJ,EAAMK,IAAI,SAAAC,GACT,OAAGA,EAAKC,SAENC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAKM,IACdJ,EAAAC,EAAAC,cAAA,OACAG,QAAS,kBAAMZ,EAAeK,EAAKM,KACnCE,UAAU,mBACTR,EAAKS,SAENP,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMX,EAAWI,EAAKM,MAAvC,MAEKJ,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAKM,IACpBJ,EAAAC,EAAAC,cAAA,OACAG,QAAS,kBAAMZ,EAAeK,EAAKM,KACnCE,UAAU,QACTR,EAAKS,SACNP,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMX,EAAWI,EAAKM,MAAvC,QAKJJ,EAAAC,EAAAC,cAAA,oCAGD,OACEF,EAAAC,EAAAC,cAAA,WACGP,KC7Bea,6MAEnBC,MAAQ,CACNF,QAAS,MAGXG,aAAe,SAACC,GACdC,EAAKC,SAAS,CACZN,QAASI,EAAMG,OAAOC,WAI1BC,aAAe,SAACL,GACdA,EAAMM,iBACNL,EAAKM,MAAMC,QAAQP,EAAKH,OACxBG,EAAKC,SAAS,CACZN,QAAS,8EAKX,OACEP,EAAAC,EAAAC,cAAA,QAAMI,UAAU,WAAWc,SAAUC,KAAKL,cACxChB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,gBACbN,EAAAC,EAAAC,cAAA,SAAOI,UAAU,YAAYgB,SAAUD,KAAKX,aAC5CK,MAAOM,KAAKZ,MAAMF,UAClBP,EAAAC,EAAAC,cAAA,UAAQqB,KAAK,UAAb,qBA1B4BC,aCoDvBC,6MAhDbhB,MAAQ,CACNjB,MAAO,MAGT2B,QAAU,SAACrB,GACTA,EAAKM,GAAKsB,KAAKC,SACff,EAAKC,SAAS,CACZrB,MAAK,CAAGM,GAAH8B,OAAAC,OAAAC,EAAA,EAAAD,CAAYjB,EAAKH,MAAMjB,aAKhCC,eAAiB,SAACW,GAChB,IAAIZ,EAAQoB,EAAKH,MAAMjB,MAAMK,IAAI,SAAAC,GAC/B,OAAGA,EAAKM,KAAOA,EAEX,CAACA,GAAIN,EAAKM,GACVG,QAAST,EAAKS,QACdR,UAAWD,EAAKC,UACZD,IAGVc,EAAKC,SAAS,CACZrB,MAAOA,OAKXE,WAAa,SAACU,GACZ,IAAM2B,EAAgBnB,EAAKH,MAAMjB,MAAMwC,OAAO,SAAAlC,GAAI,OAAIA,EAAKM,KAAOA,IAElEQ,EAAKC,SAAS,CACZrB,MAAOuC,IACXE,QAAQC,IAAItB,EAAKH,gFAIf,OACET,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAACiC,EAAD,CAAUhB,QAASE,KAAKF,UACxBnB,EAAAC,EAAAC,cAACkC,EAAD,CAAO5C,MAAO6B,KAAKZ,MAAMjB,MACzBC,eAAgB4B,KAAK5B,eACrBC,WAAY2B,KAAK3B,qBA5CP8B,aCOEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1fa7907a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nconst Todo = ({todos, toggleComplete, deleteTodo}) => {\r\n\r\n\tconst todoList = todos.length ? (\r\n\t\ttodos.map(todo => {\r\n\t\t\tif(todo.complete)\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<div key={todo.id}>\r\n\t\t\t\t\t\t<div \r\n\t\t\t\t\t\tonClick={() => toggleComplete(todo.id)}\r\n\t\t\t\t\t\tclassName=\"crossedOff todo\">\r\n\t\t\t\t\t\t{todo.content}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<button onClick={() => deleteTodo(todo.id)}>X</button>\r\n\t\t\t\t\t</div>)\r\n\t\t\treturn (<div key={todo.id}>\r\n\t\t\t\t\t\t<div \r\n\t\t\t\t\t\tonClick={() => toggleComplete(todo.id)}\r\n\t\t\t\t\t\tclassName=\"todo\">\r\n\t\t\t\t\t\t{todo.content}</div>\r\n\t\t\t\t\t\t<button onClick={() => deleteTodo(todo.id)}>X</button>\r\n\t\t\t\t\t</div>)\r\n\t\t})\r\n\t)\r\n\t:\r\n\t(<p>You have no todos left!</p>)\r\n\r\n\r\n\treturn (\r\n\t  <div>\r\n\t    {todoList}\r\n\t  </div>\r\n\t);\r\n}\r\n\r\nexport default Todo;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nexport default class TodoForm extends Component {\r\n  \r\n  state = {\r\n    content: \"\"\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      content: event.target.value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.addTodo(this.state);\r\n    this.setState({\r\n      content: \"\"\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"todoForm\" onSubmit={this.handleSubmit}>\r\n        <div className=\"inputWrapper\">\r\n          <input className=\"textInput\" onChange={this.handleChange}\r\n          value={this.state.content}/>\r\n          <button type=\"submit\">Add Todo</button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Todos from './todos';\nimport TodoForm from './todoForm';\n\nclass App extends Component {\n  \n  state = {\n    todos: []\n  }\n\n  addTodo = (todo) => {\n    todo.id = Math.random();\n    this.setState({\n      todos: [todo, ...this.state.todos]\n    })\n\n  }\n\n  toggleComplete = (id) => {\n    let todos = this.state.todos.map(todo => {\n      if(todo.id === id) \n        return (\n          {id: todo.id,\n          content: todo.content,\n          complete: !todo.complete})\n      return (todo)\n    })\n\n    this.setState({\n      todos: todos\n    })\n\n  }\n\n  deleteTodo = (id) => {\n    const filteredTodos = this.state.todos.filter(todo => todo.id !== id)\n    \n    this.setState({\n      todos: filteredTodos});\n  console.log(this.state);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoForm addTodo={this.addTodo}/>\n        <Todos todos={this.state.todos} \n        toggleComplete={this.toggleComplete} \n        deleteTodo={this.deleteTodo} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}